// Â© SS220, An EULA/CLA with a hosting restriction, full text: https://raw.githubusercontent.com/SerbiaStrong-220/space-station-14/master/CLA.txt
using FancyWindow = Content.Client.UserInterface.Controls.FancyWindow;
using Content.Shared.SS220.SuperMatter.Emitter;
using Robust.Client.UserInterface.XAML;
using Robust.Client.UserInterface.Controls;
using Robust.Client.AutoGenerated;
using System.Numerics;
using Robust.Client.Graphics;

namespace Content.Client.SS220.SuperMatter.Emitter.Ui;

[GenerateTypedNameReferences]
public sealed partial class SuperMatterEmitterExtensionMenu : FancyWindow
{
    [Dependency] ILocalizationManager _localization = default!;

    public event Action<BaseButton.ButtonEventArgs, int, int>? OnSubmitButtonPressed;
    public event Action<BaseButton.ButtonEventArgs>? OnEmitterActivatePressed;

    public SuperMatterEmitterExtensionMenu()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);
        InitPowerConsumptionSpinBox();
        InitMatterToEnergyRatioSlider();
        SubmitButton.OnPressed += args =>
        {
            OnSubmitButtonPressed?.Invoke(args, PowerConsumptionSpinBox.Value, MatterToEnergyRatioSlider.Value);
            ChangeApplyState(ApplyButtonStateEnum.ChangesSaved);
        };
        EmitterActivationButton.OnPressed += args =>
        {
            OnEmitterActivatePressed?.Invoke(args);

        };
    }
    public void SetEmitterParams(int? ratio, int? power)
    {
        if (ratio != null)
            MatterToEnergyRatioSlider.Value = ratio.Value;
        if (power != null)
            PowerConsumptionSpinBox.Value = power.Value;
        ChangeApplyState(ApplyButtonStateEnum.ChangesSaved);
    }
    public void ChangeActivationState(ActivationStateEnum state)
    {
        switch (state)
        {
            case ActivationStateEnum.EmitterActivated:
                ChangeButtonLabelColor(EmitterActivationButton, Color.LimeGreen);
                EmitterActivationButton.Text = _localization.GetString("supermatter-emitter-extension-activated-emitter");
                break;
            case ActivationStateEnum.EmitterDeactivated:
                ChangeButtonLabelColor(EmitterActivationButton, Color.OrangeRed);
                EmitterActivationButton.Text = _localization.GetString("supermatter-emitter-extension-deactivated-emitter");
                break;
        }
    }

    private void InitPowerConsumptionSpinBox()
    {
        PowerConsumptionSpinBox.ClearButtons();
        foreach (var child in PowerConsumptionSpinBox.Children)
        {
            if (child.GetType() == typeof(LineEdit))
                child.MinSize = new Vector2(60, 0);
        }

        PowerConsumptionSpinBox.AddLeftButton(-500, "-500");
        PowerConsumptionSpinBox.AddLeftButton(-100, "-100");
        PowerConsumptionSpinBox.AddRightButton(100, "+100");
        PowerConsumptionSpinBox.AddRightButton(500, "+500");
        PowerConsumptionSpinBox.IsValid = PowerConsumptionValidate;
        // it should be here to Force SpinBox UpdateButtonCanPress() cause its private
        PowerConsumptionSpinBox.Value = SuperMatterEmitterExtensionConsts.BaseEnergyConsumption;
        PowerConsumptionSpinBox.ValueChanged += (_) =>
        {
            ChangeApplyState(ApplyButtonStateEnum.ChangesNotSaved);
        };
    }
    private void InitMatterToEnergyRatioSlider()
    {
        MatterToEnergyRatioSlider.OnValueChanged += (_) =>
        {
            ChangeApplyState(ApplyButtonStateEnum.ChangesNotSaved);
        };
        ChangeApplyState(ApplyButtonStateEnum.ChangesSaved);

    }
    private bool PowerConsumptionValidate(int power)
    {
        if (power < 600)
            return false;
        return true;
    }
    private void ChangeApplyState(ApplyButtonStateEnum state)
    {
        ChangeSliderLabels();
        switch (state)
        {
            case ApplyButtonStateEnum.ChangesSaved:
                ChangeButtonLabelColor(SubmitButton, Color.LightGreen);
                SubmitDescription.Text = _localization.GetString("supermatter-emitter-extension-changes-saved");
                SubmitDescription.FontColorOverride = Color.LightGreen;
                break;
            case ApplyButtonStateEnum.ChangesNotSaved:
                ChangeButtonLabelColor(SubmitButton, Color.Orange);
                SubmitDescription.Text = _localization.GetString("supermatter-emitter-extension-changes-unsaved");
                SubmitDescription.FontColorOverride = Color.Orange;
                break;
        }
    }
    private void ChangeButtonLabelColor(Button button, Color color)
    {
        button.Label.FontColorOverride = color;
    }
    private void ChangeSliderLabels()
    {
        MatterRatioResult.Text = _localization.GetString("supermatter-emitter-extension-matter",
                    ("value", (SuperMatterEmitterExtensionConsts.GetMatterFromPower((100 - MatterToEnergyRatioSlider.Value) / 100f * PowerConsumptionSpinBox.Value)).ToString("N1")));
        EnergyRatioResult.Text = _localization.GetString("supermatter-emitter-extension-energy",
                    ("value", (SuperMatterEmitterExtensionConsts.GetEnergyFromPower(MatterToEnergyRatioSlider.Value / 100f * PowerConsumptionSpinBox.Value)).ToString("N1")));
    }

    private enum ApplyButtonStateEnum
    {
        ChangesSaved,
        ChangesNotSaved
    }
}

public enum ActivationStateEnum
{
    EmitterActivated,
    EmitterDeactivated
}
