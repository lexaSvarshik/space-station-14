// Â© SS220, An EULA/CLA with a hosting restriction, full text: https://raw.githubusercontent.com/SerbiaStrong-220/space-station-14/master/CLA.txt
using System.Linq;
using System.Numerics;
using Content.Client.UserInterface.Controls;
using Content.Shared.SS220.CultYogg.Buildings;
using Content.Shared.SS220.CultYogg.MiGo;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.SS220.CultYogg.MiGo.UI;

[GenerateTypedNameReferences]
public sealed partial class MiGoErectMenu : FancyWindow
{
    private readonly MiGoErectBoundUserInterface _owner;
    private List<CultYoggBuildingPrototype>? _buildings;

    private float _maxItemsGridWidth = 0f;

    public MiGoErectMenu(MiGoErectBoundUserInterface owner)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _owner = owner;
        EraseButton.OnToggled += (args) => OnEraseToggled(args.Pressed);
    }

    protected override Vector2 ArrangeOverride(Vector2 finalSize)
    {
        finalSize = base.ArrangeOverride(finalSize);
        var maxGridWidth = ItemsScrollContainer.Width - ItemsContainer.Margin.SumHorizontal;
        if (maxGridWidth != _maxItemsGridWidth)
        {
            _maxItemsGridWidth = maxGridWidth;
            ItemsContainer.MaxGridWidth = _maxItemsGridWidth;
            ItemsScrollContainer.InvalidateArrange();
        }
        return finalSize;
    }

    public void Update(EntityUid uid, MiGoErectBuiState state)
    {
        _buildings = state.Buildings;
        ItemsContainer.DisposeAllChildren();
        foreach (var building in _buildings.OrderBy(x => x.Order))
        {
            var item = new MiGoErectMenuItem();
            ItemsContainer.AddChild(item);
            item.SetOwner(this);
            item.SetItem(building);
        }
    }

    public void SetSelectedItem(CultYoggBuildingPrototype? building)
    {
        foreach (var child in ItemsContainer.Children)
        {
            if (child is not MiGoErectMenuItem item)
                continue;
            item.Pressed = building == item.Building;
        }
    }

    public void SetEraseEnabled(bool isErase)
    {
        EraseButton.Pressed = isErase;
    }

    public void OnItemToggled(MiGoErectMenuItem item)
    {
        if (item.Building is null)
            return;
        _owner.OnBuildingToggle(item.Building);
    }

    public void OnEraseToggled(bool isErase)
    {
        _owner.OnEraseToggle(isErase);
    }
}
