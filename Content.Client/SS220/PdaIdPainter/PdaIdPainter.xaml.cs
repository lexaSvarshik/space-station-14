using System.Numerics;
using Content.Client.UserInterface.Controls;
using Content.Shared.Access.Components;
using Content.Shared.PDA;
using Content.Shared.Prototypes;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.SS220.PdaIdPainter;

[GenerateTypedNameReferences]
public sealed partial class PdaIdPainter : FancyWindow
{
    public Action<string>? OnPdaPicked;
    public Action<string>? OnIdPicked;

    public HashSet<EntityPrototype> PdaAndIds = [];

    public PdaIdPainter()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        SearchPdaBar.OnTextChanged += OnSearchBarTextChanged;
        SearchIdBar.OnTextChanged += OnSearchBarTextChanged;
    }

    private void OnSearchBarTextChanged(LineEdit.LineEditEventArgs args)
    {
        PopulateList(null, null);
    }

    private void PopulateList(EntProtoId? pdaDefaultProto, EntProtoId? idDefaultProto)
    {
        PdaList.RemoveAllChildren();
        IdList.RemoveAllChildren();

        var searchPdaTerm = SearchPdaBar.Text.ToLower();
        var searchIdTerm = SearchIdBar.Text.ToLower();

        var groupForId = new ButtonGroup();
        var groupForPda = new ButtonGroup();

        foreach (var entry in PdaAndIds)
        {
            if (entry.HasComponent<PdaComponent>() &&
                (string.IsNullOrEmpty(searchPdaTerm) || entry.Name.Contains(searchPdaTerm as string, StringComparison.CurrentCultureIgnoreCase)))
            {
                var button = CreateButton(entry, groupForPda, pdaDefaultProto?.Id, OnPdaPicked);
                PdaList.AddChild(button);
            }

            if (entry.HasComponent<IdCardComponent>() &&
                (string.IsNullOrEmpty(searchIdTerm) || entry.Name.Contains(searchIdTerm as string, StringComparison.CurrentCultureIgnoreCase)))
            {
                var button = CreateButton(entry, groupForId, idDefaultProto?.Id, OnIdPicked);
                IdList.AddChild(button);
            }
        }
    }

    private Button CreateButton(EntityPrototype entry, ButtonGroup group, string? defaultId, Action<string>? onPicked)
    {
        var button = new Button
        {
            HorizontalExpand = true,
            Group = group,
            StyleClasses = { "OpenBoth" },
            ToggleMode = true,
            Pressed = entry.ID == defaultId
        };

        var hbox = new BoxContainer
        {
            Orientation = BoxContainer.LayoutOrientation.Horizontal,
            SeparationOverride = 10,
            HorizontalExpand = true,
        };

        var iconTexture = new EntityPrototypeView
        {
            MinSize = new Vector2(32, 32),
            MaxSize = new Vector2(32, 32),
        };
        iconTexture.SetPrototype(entry);

        var labelForTexture = new Label
        {
            Text = entry.Name,
            HorizontalExpand = true,
        };

        hbox.AddChild(iconTexture);
        hbox.AddChild(labelForTexture);
        button.AddChild(hbox);

        button.OnPressed += _ =>
        {
            onPicked?.Invoke(entry.ID);
            button.Pressed = true;
        };

        return button;
    }

    public void Populate(HashSet<EntityPrototype> entries, EntProtoId? pdaDefaultProto, EntProtoId? idDefaultProto)
    {
        PdaAndIds = entries;
        PopulateList(pdaDefaultProto, idDefaultProto);
    }
}
